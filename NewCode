// Globals
let inp = null; // input
let scr = null; // screen
let aud = null; // audio

const player = {
	x: 90,
	y: 30,
	speed: 0.5,
	isWalking: false,
	flip: 0,
	framesSinceWalkStart: 0
}

const mushrooms = [
	{  
		x: 30,
		y: 20,
		wasGrabbed: false
	},
	{  
		x: 150,
		y: 20,
		wasGrabbed: false
	}
];

const mushrooms2 = [
	{
		x: 150,
		y: 80,
		wasGrabbed: false,
	},
	{
		x: 45,
		y: 75,
		wasGrabbed: false,
	}
  ]

let numberOfGrabbedMushrooms = 0;
let numberOfGrabbedMushrooms2 = 0;
let gameStartTime = 0; 




function mushroomIsGrabbed(mushroom) {

  return mushroom.isGrabbed === true;
}



let randomColor = 1;

// initialization
engine.onInit = () => {
	inp = engine.input;
	scr = engine.screen;
	aud = engine.audio;
	
	updateColors();
};

  


// update loop
engine.onUpdate = () => {
  scr.clear( 1 );

	scr.drawMap(
	  0,      // originX on map
	  0,      // originY on map
	  -1,     // width
	  -1,     // height
	  0,      // screenX
	  0,      // screenY
	  0       // tilemap index
	);
	
	drawMushrooms();
	
	updatePlayer();
	
	let textMainColor = 2;
	if ( numberOfGrabbedMushrooms > 0 ) {
		textMainColor = randomColor;
	}
	
	let textPositionOffset = 0;
	if ( numberOfGrabbedMushrooms > 1 ) {
		textPositionOffset = Math.sin( engine.realTimeSinceGameStart * 10 ) * 8;
	}
	
	scr.drawText(
		'Welcome to Bitmelo!',
		50,
		90 + Math.floor( textPositionOffset ),
		textMainColor,
		1,
		0
	);
	

if(gameStartTime == 0 ){
gameStartTime = Date.now(); // Set game start time 
}

// Update number of grabbed mushrooms
for (let i = 0; i < mushrooms.length; i++) {
  if (!mushrooms[i].wasGrabbed) {
    if (mushroomIsGrabbed(mushrooms[i])) {
      numberOfGrabbedMushrooms++;
      mushrooms[i].wasGrabbed = true; // Set wasGrabbed flag to true
    }
  }
}


// Draw mushroom calculator
const calcX = 10;
const calcY = 10;
const calcWidth = 80;
const calcHeight = 40;
scr.drawRect(calcX, calcY, calcWidth, calcHeight, 0);
scr.drawText(`Mushrooms: ${numberOfGrabbedMushrooms}`, calcX + 5, calcY + 5, 7, 1, 0);
scr.drawText(`Total: ${mushrooms.length + mushrooms2.length}`, calcX + 5, calcY + 20, 7, 1, 0);

// Calculate game elapsed time
const currentTime = Date.now();
gameElapsedTime = Math.floor((currentTime - gameStartTime) / 1000); // Calculate elapsed time  in seconds

// Draw game runtime
scr.drawText(`Time: ${gameElapsedTime} seconds`, calcX + 5, calcY + 35, 7, 1, 0);

// Check if all mushrooms are collected
let mushroomsCollected = 0;
for (let i = 0; i < mushrooms.length; i++) {
  if (mushrooms[i].wasGrabbed) {
    mushroomsCollected++;
  }
}

let mushroomsCollected2 = 0;
for (let i = 0; i < mushrooms2.length; i++) {
  if (mushrooms2[i].wasGrabbed) {
    mushroomsCollected2++;
  }
}

if (mushroomsCollected >= 1 && mushroomsCollected2 >= 1) { // in case player touch one red and one green
  // Stop game time
  if (gameStartTime !== 0) {
    gameStartTime = 0;
    gameElapsedTime = Math.floor((currentTime - gameStartTime) / 1000); // Calculate elapsed time in seconds
    // Draw game over message on screen
    scr.drawText(`Game Over!!`, calcX + 10, calcY + 55, 23, 4, 0);
    scr.drawText(`Total: ${0}`, calcX + 5, calcY + 20, 7, 1, 0);
    scr.drawText(`Mushrooms: ${0}`, calcX + 5, calcY + 5, 7, 1, 0);
  }
} else if (mushroomsCollected >= 2 && mushroomsCollected2 < 2 ) { // in case player touch only red mushrooms
  // Stop game time
  if (gameStartTime !== 0) {
    gameStartTime = 0;
    gameElapsedTime = Math.floor((currentTime - gameStartTime) / 1000); // Calculate elapsed time in seconds
    // Draw time's up message on screen
    scr.drawText(`Time's Up!`, calcX + 10, calcY + 45, 13, 2, 0);
  }
} else if (mushroomsCollected2 >= 1) { // in case player touch only green mushrooms 
  // Stop game time
  if (gameStartTime !== 0 && mushroomsCollected === 0) { 
    gameStartTime = 0;
    gameElapsedTime = Math.floor((currentTime - gameStartTime) / 1000); // Calculate elapsed time in seconds
    // Draw game over message on screen
    scr.drawText(`Game Over!!`, calcX + 10, calcY + 55, 23, 4, 0);
  }
}



};





function drawMushrooms() {
  mushrooms.forEach(mushroom => {
    if (!mushroom.wasGrabbed) {
      scr.drawTile(61, mushroom.x - 8, mushroom.y - 8, 0);
    }
  });
  mushrooms2.forEach(mushroom => {
    if (!mushrooms2.wasGrabbed) {
      scr.drawTile(53, mushroom.x - 8, mushroom.y - 8, 0);
    }
  });
}





function updatePlayer() {
	let newX = player.x;
	let newY = player.y;
	let frameGID = 1; // sprite changer
	
	let isWalking = false;
	if ( inp.left.pressed ) {
		newX -= player.speed;
		isWalking = true;
		player.flip = 1;
	}
	else if ( inp.right.pressed ) {
		newX += player.speed;
		isWalking = true;
		player.flip = 0;
	}
	
	if ( inp.down.pressed ) {
		newY -= player.speed;
		isWalking = true;
	}
	else if ( inp.up.pressed ) {
		newY += player.speed;
		isWalking = true;
	}
	
	if ( isWalking ) {
		player.framesSinceWalkStart += 1;
	}
	
	// play or stop audio
	if ( isWalking && !player.isWalking ) {
		// started walking
		player.framesSinceWalkStart = 0;
		
		let note = bitmelo.Notes.C4;
		if ( numberOfGrabbedMushrooms > 1 ) {
			note = bitmelo.Notes.C2;
		}
		else if ( numberOfGrabbedMushrooms > 0 ) {
			note = bitmelo.Notes.C3;
		}
		
		aud.playInfiniteSound(
			0,
			note,
			0.5,
			2
		);
	}
	else if ( !isWalking && player.isWalking ) {
		// stopped walking
		aud.stopInfiniteSound( 0 );
	}
	
	player.isWalking = isWalking;
	
	// make sure we are not colliding with the fence
	if ( 
		newX >= 16
		&& newX < scr.width - 16
		&& newY >= 24
		&& newY < scr.height - 16
	) {
		player.x = newX;
		player.y = newY;
	}
	
	// check mushroom collisions
	for ( let i = 0; i < mushrooms.length; i += 1 ) {
		const mushroom = mushrooms[i];
		if ( !mushroom.wasGrabbed ) {
			const deltaX = Math.abs( player.x - mushroom.x );
			const deltaY= Math.abs( player.y - mushroom.y );
			const distance = Math.sqrt( deltaX * deltaX + deltaY * deltaY );
			
			// player has grabbed a mushroom
			if ( distance <= 12 ) {
				mushroom.wasGrabbed = true;
				numberOfGrabbedMushrooms += 1;
				aud.playSound(
					1,
					bitmelo.Notes.E3,
					48,
					0.25,
					1
				);
			}
		}
	}
	

	for ( let i = 0; i < mushrooms2.length; i += 1 ) {
		const mushroom2 = mushrooms2[i];
		if ( !mushroom2.wasGrabbed ) {
			const deltaX = Math.abs( player.x - mushroom2.x );
			const deltaY= Math.abs( player.y - mushroom2.y );
			const distance = Math.sqrt( deltaX * deltaX + deltaY * deltaY );
			
			// player has grabbed a mushroom
			if ( distance <= 12 ) {
      mushroom2.wasGrabbed = true;
      numberOfGrabbedMushrooms += 1;
				aud.playSound(
					1,
					bitmelo.Notes.E3,
					48,
					0.25,
					1
				);
			}
		}
	}
	
	
	// draw the player
	if ( player.isWalking ) {
		if ( player.framesSinceWalkStart % 16 < 8 ) {
			frameGID = 2;
		}
		else {
			frameGID = 3;
		}
	}
	scr.drawTile(
		frameGID,
		Math.floor( player.x ) - 8, // center the tile on the position
		Math.floor( player.y ) - 8, // center the tile on the position
		player.flip
	);
}


function updateColors() {
	randomColor = Math.floor( Math.random() * 16 ) + 1;
	setTimeout( updateColors, 100 );
}





